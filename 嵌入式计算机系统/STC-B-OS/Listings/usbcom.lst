C51 COMPILER V9.60.7.0   USBCOM                                                            10/31/2023 17:08:22 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE USBCOM
OBJECT MODULE PLACED IN .\Objects\usbcom.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\usbcom.c LARGE OMF2 OPTIMIZE(0,SPEED) BROWSE DEBUG PRINT(.\Listings\
                    -usbcom.lst) TABS(2) OBJECT(.\Objects\usbcom.obj)

line level    source

   1          #include "usbcom.h"
   2          
   3          
   4          void usbcom_init(u32 baudrate) 
   5          {
   6   1          XDATA u16 reload;
   7   1          
   8   1          //Set TXD(P31) to Push-Pull RXD(P30) to HiZ
   9   1          {
  10   2          CLEARBIT(P3M1, 1);
  11   2          SETBIT(P3M0, 1);
  12   2          
  13   2          SETBIT(P3M1, 0);
  14   2          CLEARBIT(P3M0, 0);
  15   2        }
  16   1      
  17   1          //Configure baudrate timer
  18   1          {
  19   2              reload = 65536 - (MAIN_Fosc / 4) / baudrate;
  20   2              
  21   2              AUXR |= 0x01;   //S1 BRT Use Timer2;
  22   2              AUXR &= ~(1<<4);  //Timer stop
  23   2              AUXR &= ~(1<<3);  //Timer2 set As Timer
  24   2              AUXR |=  (1<<2);  //Timer2 set as 1T mode
  25   2              IE2  &= ~(1<<2);  //Disable interrup
  26   2      
  27   2              TH2 = (u8)(reload>>8);
  28   2              TL2 = (u8)reload;
  29   2              AUXR |=  (1<<4);  //Timer run enable
  30   2          }
  31   1      
  32   1          //Initialize UART1 on P30 and P31
  33   1          {
  34   2              PS = 1; //High priority interrupt
  35   2              SCON = (SCON & 0x3f) | (1<<6); //8bit mode
  36   2              REN = 1; //Enable Rx
  37   2              P_SW1 = (P_SW1 & 0x3f) | (0 & 0xc0);  //Select IO port P30/P31
  38   2              ES = 1; //Enable interrupt (wait for incoming data)
  39   2          }
  40   1      }
  41          
  42          
  43          //this function blocks current process until all data is sent
  44          //not a VFUNC because there's no reentrancy support
  45          void __usbcom_write(u8* buf, u8 len) small
  46          {
  47   1          u8 i;
  48   1        
  49   1          //Disable interrupt (Tx uses polling mode)
  50   1          ES = 0;
  51   1      
  52   1          //length is set
  53   1          if(len)
  54   1          {
C51 COMPILER V9.60.7.0   USBCOM                                                            10/31/2023 17:08:22 PAGE 2   

  55   2            for(i=0;i<len;i++)
  56   2            {
  57   3                //clear TX end flag
  58   3                TI = 0;
  59   3                //feed byte into UART1 buffer
  60   3                SBUF = buf[i];
  61   3                //spin until TX end flag is set (by hardware)
  62   3                while(TI == 0);
  63   3            }
  64   2          }
  65   1          else
  66   1          {
  67   2            //length is 0, auto detect '\0'
  68   2            for(i=0;;i++)
  69   2            {
  70   3                //clear TX end flag
  71   3                TI = 0;
  72   3                //feed byte into UART1 buffer
  73   3                if(buf[i] == '\0') break;   
  74   3                SBUF = buf[i];
  75   3                //spin until TX end flag is set (by hardware)
  76   3                while(TI == 0);
  77   3            }
  78   2          }
  79   1          //Enable UART1 interrupt
  80   1          //(Rx uses interrupt to trigger, but still runs in polling mode)
  81   1          RI = 0;//Reset all flags
  82   1          TI = 0;
  83   1          ES = 1;
  84   1      }
  85          
  86          XDATA u8 usbcom_buf[128];
  87          XDATA u8 usbcom_rxcnt;
  88          XDATA u32 usbcom_timeout;
  89          XDATA u8 usbcom_evtstate = 0;
  90          
  91          void usbcom_interrupt (void) interrupt UART1_VECTOR
  92          {
  93   1        //Tx uses polling mode, INT source can only be RX
  94   1      
  95   1          //Disable UART1 interrupt
  96   1          //(Rx uses interrupt to trigger, but still runs in polling mode)
  97   1          ES = 0;
  98   1      
  99   1          usbcom_rxcnt = 0;
 100   1          while(1)
 101   1          {
 102   2              RI = 0; //Remove RX end flag.
 103   2              usbcom_buf[usbcom_rxcnt++] = SBUF; //Retrieve byte.
 104   2      
 105   2              //Spin until RX end flag is set (by hardware)
 106   2              usbcom_timeout = 500;//You have to try out a proper value for specific baud and clock frequency se
             -ttings
 107   2              while(RI==0) 
 108   2              {
 109   3                  if(--usbcom_timeout == 0)
 110   3                      goto RX_END;
 111   3              }
 112   2          }
 113   1      
 114   1          RX_END:;
 115   1          
C51 COMPILER V9.60.7.0   USBCOM                                                            10/31/2023 17:08:22 PAGE 3   

 116   1          TI = 0;  //Reset all flags
 117   1          RI = 0;
 118   1          ES = 1; //Enable UART1 interrupt
 119   1      
 120   1          usbcom_evtstate = 1;
 121   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    364    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    140    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
